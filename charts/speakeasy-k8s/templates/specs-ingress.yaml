{{- if and .Values.registry.ingress.enabled (gt (len .Values.registry.ingress.specsHostnames) 0) (gt (len .Values.registry.ingress.webHostnames) 0) (gt (len .Values.registry.ingress.apiHostnames) 0) }}
{{- $serviceName := printf "%s-%s" (include "speakeasy-registry.fullname" .) "service" -}}
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{ printf "%s-%s" (include "speakeasy-registry.fullname" .) "specs-ingress" }}
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: {{ printf "%s-%s" (include "speakeasy-registry.fullname" .) "letsencrypt" }}
    acme.cert-manager.io/http01-edit-in-place: "true"
    nginx.ingress.kubernetes.io/configuration-snippet: |
      set_by_lua_block $resourcePath {
        local path = ngx.var.request_uri
        local regExpression = "^/(?<orgSlug>[^/]+)/(?<workspaceSlug>[^/]+)/(?<f>[^$]+)"

        local matches = ngx.re.match(path, regExpression)
        if matches then
          local orgSlug = matches["orgSlug"]
          local workspaceSlug = matches["workspaceSlug"]
          local imageRef = matches["imageRef"]
          return "/v1/public/" .. orgSlug .. "/" .. workspaceSlug .. "/" .. imageRef
        end

        return "/v1/"
      }

      proxy_set_header X-Original-URI $resourcePath;
      rewrite .* $resourcePath break;
  labels:
    app.kubernetes.io/name: {{ printf "%s-%s" (include "speakeasy-registry.fullname" .) "specs-ingress" }}
spec:
  tls:
    - hosts:
    {{- range $v := .Values.registry.ingress.specsHostnames }}
        - {{ $v }}
    {{- end }}
      secretName: nginx-letsencrypt-registry-spec-tls
  rules:
  {{- range $v := .Values.registry.ingress.specsHostnames }}
    - host: {{ $v }}
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: {{ $serviceName }}
                port:
                  number: 80
  {{- end }}
{{- end }}
