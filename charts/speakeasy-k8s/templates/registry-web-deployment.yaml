{{- $serviceName := printf "%s-%s" (include "speakeasy-registry.fullname" .) "service" -}}
{{- $serverVersion := (include "speakeasy-registry.server-version" .) -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $serviceName }}
  labels:
    {{- include "speakeasy-registry.labels" . | nindent 4 }}
    {{- if .Values.datadog.enabled }}
    {{- include "speakeasy-registry.datadog-labels" (dict "env" .Values.env "service" $serviceName "version" "TBD" ) | nindent 4 }}
    {{- end }}
spec:
  selector:
    matchLabels:
      {{- include "speakeasy-registry.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "speakeasy-registry.selectorLabels" . | nindent 8 }}
        {{- if .Values.datadog.enabled }}
        {{- include "speakeasy-registry.datadog-labels" (dict "env" .Values.env "service" $serviceName "version" "TBD" ) | nindent 8 }}
        {{- end }}
    spec:
      containers:
        - name: registry
          image: "gcr.io/linen-analyst-344721/speakeasy-api/registry:{{ .Values.registry.image.tag }}"
          env:
            - name: BIGQUERY_PROJECT
              value: {{ .Values.bigquery.ProjectID }}
            - name: BIGQUERY_DATASET
              value: {{ .Values.bigquery.DatasetID }}
            {{- if .Values.registry.svcSecretKey }}
            - name: GOOGLE_APPLICATION_CREDENTIALS
              value: "/secrets/{{ .Values.registry.svcSecretKey }}"
            {{- end }}
            - name: POSTGRES_DSN
              value: {{ .Values.postgresql.DSN }}
            - name: POSTHOG_API_KEY
              value: phc_PjgvvGVRmAUE4NHxT6pz6VHZ3cmMIM6vM7rkQ04itLf
            - name: POSTHOG_ENDPOINT
              value: https://metrics.speakeasyapi.dev
            - name: SERVER_VERSION
              value: {{ $serverVersion }}
            - name: SPEAKEASY_ENVIRONMENT
              value: {{ .Values.env }}
            - name: SIGN_IN_URL
              value: {{ .Values.auth.SignInURL }}
            - name: CLOUD_PROVIDER
              value: {{ .Values.cloud }}
            - name: GITHUB_CLIENT_ID
              value: {{ .Values.auth.GithubClientId }}
            - name: GITHUB_CALLBACK_URL
              value: {{ .Values.auth.GithubCallbackURL }}
            {{- if .Values.registry.sendGridKey }}
            - name: SENDGRID_API_KEY
              valueFrom:
                secretKeyRef:
                  name: send-grid-key-secret
                  key: sendGridKey
            {{- end }}
            {{- if .Values.auth.GithubClientSecretName }}
            - name: GITHUB_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.auth.GithubClientSecretName }}
                  key: {{ .Values.auth.GithubClientSecretKey }}
            {{- end }}
            - name: JWT_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: jwt-secret-key-secret
                  key: jwtSecretKey
            {{- if .Values.datadog.enabled }}
            - name: DD_ENV
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.labels['tags.datadoghq.com/env']
            - name: DD_SERVICE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.labels['tags.datadoghq.com/service']
            - name: DD_VERSION
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.labels['tags.datadoghq.com/version']
            {{- end }}
            {{- range $v := .Values.registry.envVars }}
            - name: {{ $v.key}}
              value: {{ $v.value}}
            {{- end }}
          imagePullPolicy: Always
          livenessProbe:
            httpGet:
              path: /
              port: 8080
          readinessProbe:
            httpGet:
              path: /
              port: 8080
          {{- if .Values.registry.svcSecretName }}
          volumeMounts:
          - mountPath: /secrets/
            name: service-account-credentials
            readOnly: true
          {{- end }}
        - name: web
          image: "gcr.io/linen-analyst-344721/speakeasy-api/web:{{ .Values.registry.image.tag }}"
          imagePullPolicy: Always
        {{- if .Values.registry.cloudsql.enabled }}
        - name: cloud-sql-proxy
          image: gcr.io/cloudsql-docker/gce-proxy:1.28.0 # make sure to use the latest version
          imagePullPolicy: IfNotPresent
          command:
            - "/cloud_sql_proxy"
            - "-log_debug_stdout"
            - "{{ .Values.registry.cloudsql.connectionString }}"
            - "-credential_file=/secrets/{{ .Values.registry.svcSecretKey }}"
          securityContext:
            allowPrivilegeEscalation: false
            runAsUser: 2
          volumeMounts:
          - mountPath: /secrets/
            name: service-account-credentials
            readOnly: true
        {{- end }}
        - name: embed
          image: "gcr.io/linen-analyst-344721/speakeasy-api/embed-fixture:{{ .Values.registry.image.tag }}"
          imagePullPolicy: Always
      volumes:
      {{- if .Values.registry.svcSecretName }}
      - name: service-account-credentials
        secret:
          defaultMode: 420
          secretName: {{ .Values.registry.svcSecretName }}
      {{- end }}
