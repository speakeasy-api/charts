{{- $serviceName := printf "%s-%s" (include "speakeasy-registry.fullname" .) "service" -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $serviceName }}
  labels:
    {{- include "speakeasy-registry.labels" . | nindent 4 }}
    {{- if .Values.datadog.enabled }}
    {{- include "speakeasy-registry.datadog-labels" (dict "env" .Values.env "service" $serviceName "version" "TBD" ) | nindent 4 }}
    {{- end }}
spec:
  {{- if .Values.registry.replicas }}
  replicas: {{.Values.registry.replicas}}
  {{- end }}
  selector:
    matchLabels:
      {{- include "speakeasy-registry.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "speakeasy-registry.selectorLabels" . | nindent 8 }}
        {{- if .Values.datadog.enabled }}
        {{- include "speakeasy-registry.datadog-labels" (dict "env" .Values.env "service" $serviceName "version" "TBD" ) | nindent 8 }}
        {{- end }}
    spec:
      containers:
        - name: registry
          image: "gcr.io/linen-analyst-344721/speakeasy-api/registry:{{ .Values.registry.image.tag }}"
          env:
            {{ include "speakeasy-registry.registryEnvVars" . | indent 12 | trim }}
          imagePullPolicy: Always
          livenessProbe:
            initialDelaySeconds: 15
            periodSeconds: 30
            successThreshold: 1
            failureThreshold: 1
            httpGet:
              path: /
              port: 35290
          readinessProbe:
            initialDelaySeconds: 5
            periodSeconds: 15
            successThreshold: 1
            failureThreshold: 3
            httpGet:
              path: /
              port: 35290
          {{- if .Values.registry.svcSecretName }}
          volumeMounts:
            - mountPath: /secrets/
              name: service-account-credentials
              readOnly: true
          {{- end }}
        - name: web
          image: "gcr.io/linen-analyst-344721/speakeasy-api/web:{{ .Values.registry.image.tag }}"
          imagePullPolicy: Always
        {{- if .Values.registry.cloudsql.enabled }}
        - name: cloud-sql-proxy
          image: gcr.io/cloudsql-docker/gce-proxy:1.28.0 # make sure to use the latest version
          imagePullPolicy: IfNotPresent
          command:
            - "/cloud_sql_proxy"
            - "-log_debug_stdout"
            - "{{ .Values.registry.cloudsql.connectionString }}"
            - "-term_timeout=30s"
            - "-credential_file=/secrets/{{ .Values.registry.svcSecretKey }}"
          securityContext:
            allowPrivilegeEscalation: false
            runAsUser: 2
          volumeMounts:
            - mountPath: /secrets/
              name: service-account-credentials
              readOnly: true
        {{- end }}
        - name: embed
          image: "gcr.io/linen-analyst-344721/speakeasy-api/embed-fixture:{{ .Values.registry.image.tag }}"
          imagePullPolicy: Always
        {{- if .Values.portal.enabled }}
        - name: end-user-portal
          image: "gcr.io/linen-analyst-344721/speakeasy-api/end-user-portal:{{ .Values.registry.image.tag }}"
          imagePullPolicy: Always
          env:
            {{- range $v := .Values.portal.envVars }}
            - {{ $v | toYaml | indent 14 | trim }}
            {{- end }}
            - name: "HOST_TO_PORTAL_WORKSPACE_ID"
              value: {{ range $k, $v := .Values.portal.portalAdditionalHosts}}{{if $k }},{{end}}{{$v.host}}={{$v.workspaceId}}{{ end }}
        {{- end }}
      initContainers:
        - name: init-registry
          image: "gcr.io/linen-analyst-344721/speakeasy-api/registry:{{ .Values.registry.image.tag }}"
          env:
            {{ include "speakeasy-registry.registryEnvVars" . | indent 12 | trim }}
          {{- if .Values.registry.svcSecretName }}
          volumeMounts:
            - mountPath: /secrets/
              name: service-account-credentials
              readOnly: true
          {{- end }}
          command: ["/bin/sh", "-c"]
          args:
            - |
             {{- if .Values.registry.cloudsql.enabled }}
              /cloud-sql-proxy \
                -log_debug_stdout \
                {{ .Values.registry.cloudsql.connectionString }} \
                -credential_file=/secrets/{{ .Values.registry.svcSecretKey }} &
             {{- end }}
              ./migrations-cli up
      volumes:
        {{- if .Values.registry.svcSecretName }}
        - name: service-account-credentials
          secret:
            defaultMode: 420
            secretName: {{ .Values.registry.svcSecretName }}
        {{- end }}