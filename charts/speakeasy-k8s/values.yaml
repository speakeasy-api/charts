# Value of the SPEAKEASY_ENVIRONMENT env var in registry and web containers.
# Used in config loading, sourcing the right google identity platform api key/auth domain, and setting
# the appropriate server URL for the web to establish connection with registry.
# When hosting Speakeasy in your own network, this value should be set to 'hosted'
env: hosted

# Cloud to deploy Speakeasy in
cloud: gcp

# Overrides all values to set speakeasy-registry.fullname (prefixes most resources names)
fullnameOverride: ""

# Registry service hosting the Speakeasy API
registry:
  envVars:
    # Connection string for a particular data source to store Speakeasy-maintained config and requests
    - key: POSTGRES_DSN
      # If specified, use postgresql.primary.service.loadBalancerIP in place of 127.0.0.1
      value: postgres://postgres:postgres@35.233.141.8:5432/postgres?sslmode=disable
      # API Key used to send basic info (e.g. health check with cloud project name) to Speakeasy-managed Posthog instance
      # Please do not modify this
    - key: POSTHOG_API_KEY
      value: phc_PjgvvGVRmAUE4NHxT6pz6VHZ3cmMIM6vM7rkQ04itLf
  image:
    # Please override with latest stable version
    tag: sha-669a814
  # Secret containing the service account key file for the registry
  svcSecret: registry-service-account-secret
  ingress:
    # If true, registry.dns must also be set. emissary-ingress.enabled must also be set to false
    # Deploys an ingress for the registry API if both the above criteria are met
    enabled: false
    # List of domain names for registry api, only used if registry.ingress.enabled is set to true
    #apiHostnames:
    #- api.selfhostspeakeasy.com

    # List of domain names for registry web UI, only used if registry.ingress.enabled is set to true
    #webHostnames:
    #- www.selfhostspeakeasy.com
    #- selfhostspeakeasy.com

    # List of domain names for gRPC service used for request capture
    #grpcHostnames:
    #- grpc.selfhostspeakeasy.com

# Notification Emails for Infrastructure Configuration (e.g. LetsEncrypt)
# This is the email updates to manage the LetsEncrypt certificate (90 day expiration) will be sent to
# notificationEmail: "anuraag@speakeasyapi.dev"
cert-manager:
  enabled: false
  installCRDs: true
  podDnsPolicy: None
  podDnsConfig:
    nameservers:
      - 8.8.8.8
      - 1.1.1.1
      - 208.67.222.222

# ingress-nginx controller for directing traffic to Speakeasy registry, web, and gRPC services
# -- [ingress-nginx documentation](https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/configmap)
ingress-nginx:
  # If true, ingress-nginx sub-chart is deployed as the ingress controller.
  # Should be set to true if any of web.ingress.enabled, registry.ingress.enabled, or grpc.ingress.enabled are set to true.
  enabled: false
  controller:
    service:
    # static IP of ingress-nginx controller service
    # loadBalancerIP:
    config:
      use-forwarded-headers: "true"
      use-http2: "true"

# emissary-ingress controller for directing traffic to Speakeasy registry, web, and gRPC services
# -- [emissary-ingress documentation](https://www.getambassador.io/docs/emissary/)
emissary-ingress:
  # If set to true, ensure registry.ingress.enabled, cert-manager.enabled, and ingress-nginx.enabled are all set to false.
  # Currently assumes the use of Ambassador mappings (ingress support coming soon)
  enabled: false

# Auth required for user management via Google Identity Provider and Firebase
auth:
  EmailSignInURL: "https://www.selfhostspeakeasy.com"
  GIPAuthDomain: "speakeasy-selfhost.firebaseapp.com"
  GIPApiKey: "AIzaSyCU7B5CTVu_Jk1LnSxKzFw59z8Q_h-gkLY"

# Postgresql for Speakeasy to store app-specific config and requests from the SDK capture
postgresql:
  # If true, postgresql will be deployed with PVs backed by the default StorageClass for the underlying cloud provider
  # NOTE: For self-hosting, it is recommended this is only set to true for testing. A separate data source outside the
  # lifecycle of Speakeasy should be maintained following best practices for its usage and maintenance.
  enabled: false
  auth:
    postgresPassword: "postgres"
  primary:
    service:
      type: LoadBalancer
      # static IP of Postgresql LoadBalancer service
      # loadBalancerIP:
