# Value of the SPEAKEASY_ENVIRONMENT env var in registry and web containers.
# Used in config loading, sourcing the right google identity platform api key/auth domain, and setting
# the appropriate server URL for the web to establish connection with registry.
# When hosting Speakeasy in your own network, this value should be set to 'hosted'
env: hosted

# Cloud to deploy Speakeasy in
cloud: gcp

# Overrides all values to set speakeasy-registry.fullname (prefixes most resources names)
fullnameOverride: ""

# Registry service hosting the Speakeasy API
registry:
  # Environment variables to expose in the Speakeasy deployment
  # envVars:
  #   - name: EXAMPLE_ENV_VAR_KEY
  #     value: EXAMPLE_ENV_VAR_VALUE
  image:
    # Please override with latest stable version
    tag: sha-df470c5
  # Secret containing the service account key file for the registry
  # svcSecretName: service-account-secret
  # key in the secret specified in svcSecretName that maps to the service account private key used for the registry
  # svcSecretKey: service_account.json

  # Expose an optional cache (via redis API) to increase registry performance.
  # Cache not expected to be persistent. All cache keys will be set with a suffix of the registry version
  # Tested with GCP google_redis_instance in HIGH_AVAILABILITY mode maxmemory=1GB maxmemory-policy = "allkeys-lru"
  cache:
    # host:port address
    redisAddr:
    # optional password
    redisPassword:

  ingress:
    # If true, *Hostnames values below must also be set.
    # Deploys an ingress for the registry API if both the above criteria are met
    enabled: false
    # List of domain names for registry api, only used if registry.ingress.enabled is set to true
    #apiHostnames:
    #- api.selfhostspeakeasy.com

    # List of domain names for registry web UI, only used if registry.ingress.enabled is set to true
    #webHostnames:
    #- www.selfhostspeakeasy.com
    #- selfhostspeakeasy.com

    # List of domain names for gRPC service used for request capture
    #grpcHostnames:
    #- grpc.selfhostspeakeasy.com

  # cloudsql integration is still in progress, do not enable.
  cloudsql:
    enabled: false
  # cloudsql connection string to be used by cloudproxy. connectionString needs to be set if cloudsql.enabled = true
  # connectionString: "-instances=<INSTANCE_CONNECTION_NAME>=tcp:<DB_PORT>"

  # used by managed speakeasy to send invites to the platform. No need to set this value for selfhosted speakeasy
  # sendGridKey: "**********"

  # An optional field that specifies the number of desired Pods for the registry-web-deployment.
  replicas: 2

  # Use this to customise the speakeasy-registry deployment
  deployment:
    strategy:
      type: RollingUpdate
      rollingUpdate:
        maxSurge: 2
# Notification Emails for Infrastructure Configuration (e.g. LetsEncrypt)
# This is the email updates to manage the LetsEncrypt certificate (90 day expiration) will be sent to
# notificationEmail: "anuraag@speakeasyapi.dev"
# when cert-manager is enabled a cluster issuer will be created. If you want to create the cluster issuer even if cert-manager is disabled (i.e. you installed cert-manager some other way) then set this to true
createCertManagerResources: true
cert-manager:
  enabled: false
  installCRDs: true
  podDnsPolicy: None
  podDnsConfig:
    nameservers:
      - 8.8.8.8
      - 1.1.1.1
      - 208.67.222.222
dns:
  provider: cloudDNS
  project: ""
  serviceAccountSecretRef:
    name: dns01-service-account-secret
    key: "credentials.json"
posthogProxy:
  hostname: metrics.speakeasyapi.dev
  serviceName: speakeasy-posthog-proxy

bigquery:
  # GCP project containing Bigquery bounded/unbounded request tables
  # If this value is specified, these Bigquery tables will store request/response capture data from the configured
  # SDK instead of Postgres
  ProjectID: ""
  # gcloud dataset containing Bigquery bounded/unbounded request tables
  DatasetID: ""

# Auth required for user management. All values in this block are examples that should be replaced.
auth:
# The full URL to the Speakeasy homepage the user will be redirected to upon signing in
# SignInURL: "https://www.selfhostspeakeasy.com"
# Client ID of the Github Oauth app
# GithubClientId: "b0234253z345c"
# Client secret of the Github Oauth app
# GithubClientSecret: "*****************"
# The callback URL
# GithubCallbackURL: "https://api.selfhostspeakeasy.com/v1/auth/callback/github"

# GithubClientSecretName: "github-client-secret"
# GithubClientSecretKey: "githubClientSecret"

# Postgresql for Speakeasy to store app-specific config and requests from the SDK capture
postgresql:
  # If true, postgresql will be deployed with PVs backed by the default StorageClass for the underlying cloud provider
  # NOTE: For self-hosting, it is recommended this is only set to true for testing. A separate data source outside the
  # lifecycle of Speakeasy should be maintained following best practices for its usage and maintenance.
  enabled: false
  # Connection string for a particular data source to store Speakeasy-maintained config and requests
  DSN: postgres://postgres:postgres@127.0.0.1:5432/postgres?sslmode=disable
  auth:
    postgresPassword: "postgres"
  primary:
    service:
      type: LoadBalancer
      # static IP of Postgresql LoadBalancer service
      # loadBalancerIP:

# -- [ingress-nginx documentation](https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/configmap)
ingress-nginx:
  enabled: false
  controller:
    config:
      use-forwarded-headers: "true"
      use-http2: "true"

# datadog integration is still in progress, do not enable.
datadog:
  #if true, datadog tags for env/service/version will be added into containers.
  enabled: false

temporalworker:
  replicas: 1
  # Use this to customise the temporalworker worker deployment
  deployment:
    strategy:
      type: RollingUpdate
      rollingUpdate:
        maxSurge: 1

easycron:
  worker:
    replicas: 1
    # Use this to customise the easycron worker deployment
    deployment:
      strategy:
        type: RollingUpdate
        rollingUpdate:
          maxSurge: 1
  scheduler:
    # Use this to customise the easycron scheduler deployment
    deployment:
      strategy:
        type: RollingUpdate
        rollingUpdate:
          maxSurge: 1
